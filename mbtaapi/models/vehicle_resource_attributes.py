# coding: utf-8

"""
    MBTA

    MBTA service API. https://www.mbta.com

    OpenAPI spec version: 3.0
    Contact: developer@mbta.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class VehicleResourceAttributes(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'speed': 'float',
        'longitude': 'float',
        'latitude': 'float',
        'last_updated': 'str',
        'label': 'str',
        'direction_id': 'int',
        'current_stop_sequence': 'int',
        'current_status': 'str',
        'bearing': 'int'
    }

    attribute_map = {
        'speed': 'speed',
        'longitude': 'longitude',
        'latitude': 'latitude',
        'last_updated': 'last_updated',
        'label': 'label',
        'direction_id': 'direction_id',
        'current_stop_sequence': 'current_stop_sequence',
        'current_status': 'current_status',
        'bearing': 'bearing'
    }

    def __init__(self, speed=None, longitude=None, latitude=None, last_updated=None, label=None, direction_id=None, current_stop_sequence=None, current_status=None, bearing=None):
        """
        VehicleResourceAttributes - a model defined in Swagger
        """

        self._speed = None
        self._longitude = None
        self._latitude = None
        self._last_updated = None
        self._label = None
        self._direction_id = None
        self._current_stop_sequence = None
        self._current_status = None
        self._bearing = None

        if speed is not None:
          self.speed = speed
        if longitude is not None:
          self.longitude = longitude
        if latitude is not None:
          self.latitude = latitude
        if last_updated is not None:
          self.last_updated = last_updated
        if label is not None:
          self.label = label
        if direction_id is not None:
          self.direction_id = direction_id
        if current_stop_sequence is not None:
          self.current_stop_sequence = current_stop_sequence
        if current_status is not None:
          self.current_status = current_status
        if bearing is not None:
          self.bearing = bearing

    @property
    def speed(self):
        """
        Gets the speed of this VehicleResourceAttributes.
        Speed that the vehicle is traveling in meters per second. See [GTFS-realtime Position speed](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-position).

        :return: The speed of this VehicleResourceAttributes.
        :rtype: float
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """
        Sets the speed of this VehicleResourceAttributes.
        Speed that the vehicle is traveling in meters per second. See [GTFS-realtime Position speed](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-position).

        :param speed: The speed of this VehicleResourceAttributes.
        :type: float
        """

        self._speed = speed

    @property
    def longitude(self):
        """
        Gets the longitude of this VehicleResourceAttributes.
        Longitude of the vehicle's current position.  Degrees East, in the [WGS-84](https://en.wikipedia.org/wiki/World_Geodetic_System#Longitudes_on_WGS.C2.A084) coordinate system. See [GTFS-realtime Position longitude](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-position).

        :return: The longitude of this VehicleResourceAttributes.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """
        Sets the longitude of this VehicleResourceAttributes.
        Longitude of the vehicle's current position.  Degrees East, in the [WGS-84](https://en.wikipedia.org/wiki/World_Geodetic_System#Longitudes_on_WGS.C2.A084) coordinate system. See [GTFS-realtime Position longitude](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-position).

        :param longitude: The longitude of this VehicleResourceAttributes.
        :type: float
        """

        self._longitude = longitude

    @property
    def latitude(self):
        """
        Gets the latitude of this VehicleResourceAttributes.
        Latitude of the vehicle's current position. Degrees North, in the [WGS-84](https://en.wikipedia.org/wiki/World_Geodetic_System#A_new_World_Geodetic_System:_WGS.C2.A084) coordinate system. See [GTFS-realtime Position latitude](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-position).

        :return: The latitude of this VehicleResourceAttributes.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """
        Sets the latitude of this VehicleResourceAttributes.
        Latitude of the vehicle's current position. Degrees North, in the [WGS-84](https://en.wikipedia.org/wiki/World_Geodetic_System#A_new_World_Geodetic_System:_WGS.C2.A084) coordinate system. See [GTFS-realtime Position latitude](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-position).

        :param latitude: The latitude of this VehicleResourceAttributes.
        :type: float
        """

        self._latitude = latitude

    @property
    def last_updated(self):
        """
        Gets the last_updated of this VehicleResourceAttributes.
        Time at which vehicle information was last updated

        :return: The last_updated of this VehicleResourceAttributes.
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """
        Sets the last_updated of this VehicleResourceAttributes.
        Time at which vehicle information was last updated

        :param last_updated: The last_updated of this VehicleResourceAttributes.
        :type: str
        """

        self._last_updated = last_updated

    @property
    def label(self):
        """
        Gets the label of this VehicleResourceAttributes.
        User visible label, such as the one of on the signage on the vehicle.  See [GTFS-realtime VehicleDescriptor label](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-vehicledescriptor).

        :return: The label of this VehicleResourceAttributes.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this VehicleResourceAttributes.
        User visible label, such as the one of on the signage on the vehicle.  See [GTFS-realtime VehicleDescriptor label](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-vehicledescriptor).

        :param label: The label of this VehicleResourceAttributes.
        :type: str
        """

        self._label = label

    @property
    def direction_id(self):
        """
        Gets the direction_id of this VehicleResourceAttributes.
        Direction in which trip is traveling: `0` or `1`.  The meaning of `direction_id` varies based on the route. You can programmatically get the direction names from `/routes` `/data/{index}/attributes/direction_names` or `/routes/{id}` `/data/attributes/direction_names`.  

        :return: The direction_id of this VehicleResourceAttributes.
        :rtype: int
        """
        return self._direction_id

    @direction_id.setter
    def direction_id(self, direction_id):
        """
        Sets the direction_id of this VehicleResourceAttributes.
        Direction in which trip is traveling: `0` or `1`.  The meaning of `direction_id` varies based on the route. You can programmatically get the direction names from `/routes` `/data/{index}/attributes/direction_names` or `/routes/{id}` `/data/attributes/direction_names`.  

        :param direction_id: The direction_id of this VehicleResourceAttributes.
        :type: int
        """

        self._direction_id = direction_id

    @property
    def current_stop_sequence(self):
        """
        Gets the current_stop_sequence of this VehicleResourceAttributes.
        Index of current stop along trip. See [GTFS-realtime VehiclePosition current_stop_sequence](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-vehicleposition)

        :return: The current_stop_sequence of this VehicleResourceAttributes.
        :rtype: int
        """
        return self._current_stop_sequence

    @current_stop_sequence.setter
    def current_stop_sequence(self, current_stop_sequence):
        """
        Sets the current_stop_sequence of this VehicleResourceAttributes.
        Index of current stop along trip. See [GTFS-realtime VehiclePosition current_stop_sequence](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-vehicleposition)

        :param current_stop_sequence: The current_stop_sequence of this VehicleResourceAttributes.
        :type: int
        """

        self._current_stop_sequence = current_stop_sequence

    @property
    def current_status(self):
        """
        Gets the current_status of this VehicleResourceAttributes.
        Status of vehicle relative to the stops. See [GTFS-realtime VehicleStopStatus](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#enum-vehiclestopstatus).  | _**Value**_       | _**Description**_                                                                                          | |-------------------|------------------------------------------------------------------------------------------------------------| | **INCOMING_AT**   | The vehicle is just about to arrive at the stop (on a stop display, the vehicle symbol typically flashes). | | **STOPPED_AT**    | The vehicle is standing at the stop.                                                                       | | **IN_TRANSIT_TO** | The vehicle has departed the previous stop and is in transit.                                              |  

        :return: The current_status of this VehicleResourceAttributes.
        :rtype: str
        """
        return self._current_status

    @current_status.setter
    def current_status(self, current_status):
        """
        Sets the current_status of this VehicleResourceAttributes.
        Status of vehicle relative to the stops. See [GTFS-realtime VehicleStopStatus](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#enum-vehiclestopstatus).  | _**Value**_       | _**Description**_                                                                                          | |-------------------|------------------------------------------------------------------------------------------------------------| | **INCOMING_AT**   | The vehicle is just about to arrive at the stop (on a stop display, the vehicle symbol typically flashes). | | **STOPPED_AT**    | The vehicle is standing at the stop.                                                                       | | **IN_TRANSIT_TO** | The vehicle has departed the previous stop and is in transit.                                              |  

        :param current_status: The current_status of this VehicleResourceAttributes.
        :type: str
        """

        self._current_status = current_status

    @property
    def bearing(self):
        """
        Gets the bearing of this VehicleResourceAttributes.
        Bearing, in degrees, clockwise from True North, i.e., 0 is North and 90 is East. This can be the compass bearing, or the direction towards the next stop or intermediate location. See [GTFS-realtime Position bearing](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-position).

        :return: The bearing of this VehicleResourceAttributes.
        :rtype: int
        """
        return self._bearing

    @bearing.setter
    def bearing(self, bearing):
        """
        Sets the bearing of this VehicleResourceAttributes.
        Bearing, in degrees, clockwise from True North, i.e., 0 is North and 90 is East. This can be the compass bearing, or the direction towards the next stop or intermediate location. See [GTFS-realtime Position bearing](https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-position).

        :param bearing: The bearing of this VehicleResourceAttributes.
        :type: int
        """

        self._bearing = bearing

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, VehicleResourceAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
