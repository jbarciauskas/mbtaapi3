# coding: utf-8

"""
    MBTA

    MBTA service API. https://www.mbta.com

    OpenAPI spec version: 3.0
    Contact: developer@mbta.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FacilityResourceRelationships(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'stop': 'VehicleResourceRelationshipsStop',
        'alternates': 'FacilityResourceRelationshipsAlternates'
    }

    attribute_map = {
        'stop': 'stop',
        'alternates': 'alternates'
    }

    def __init__(self, stop=None, alternates=None):
        """
        FacilityResourceRelationships - a model defined in Swagger
        """

        self._stop = None
        self._alternates = None

        if stop is not None:
          self.stop = stop
        if alternates is not None:
          self.alternates = alternates

    @property
    def stop(self):
        """
        Gets the stop of this FacilityResourceRelationships.

        :return: The stop of this FacilityResourceRelationships.
        :rtype: VehicleResourceRelationshipsStop
        """
        return self._stop

    @stop.setter
    def stop(self, stop):
        """
        Sets the stop of this FacilityResourceRelationships.

        :param stop: The stop of this FacilityResourceRelationships.
        :type: VehicleResourceRelationshipsStop
        """

        self._stop = stop

    @property
    def alternates(self):
        """
        Gets the alternates of this FacilityResourceRelationships.

        :return: The alternates of this FacilityResourceRelationships.
        :rtype: FacilityResourceRelationshipsAlternates
        """
        return self._alternates

    @alternates.setter
    def alternates(self, alternates):
        """
        Sets the alternates of this FacilityResourceRelationships.

        :param alternates: The alternates of this FacilityResourceRelationships.
        :type: FacilityResourceRelationshipsAlternates
        """

        self._alternates = alternates

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FacilityResourceRelationships):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
