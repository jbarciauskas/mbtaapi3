# coding: utf-8

"""
    MBTA

    MBTA service API. https://www.mbta.com

    OpenAPI spec version: 3.0
    Contact: developer@mbta.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InformedEntity(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'trip': 'str',
        'stop': 'str',
        'route_type': 'int',
        'route': 'str',
        'facility': 'str',
        'direction_id': 'int',
        'activities': 'list[Activity]'
    }

    attribute_map = {
        'trip': 'trip',
        'stop': 'stop',
        'route_type': 'route_type',
        'route': 'route',
        'facility': 'facility',
        'direction_id': 'direction_id',
        'activities': 'activities'
    }

    def __init__(self, trip=None, stop=None, route_type=None, route=None, facility=None, direction_id=None, activities=None):
        """
        InformedEntity - a model defined in Swagger
        """

        self._trip = None
        self._stop = None
        self._route_type = None
        self._route = None
        self._facility = None
        self._direction_id = None
        self._activities = None

        if trip is not None:
          self.trip = trip
        if stop is not None:
          self.stop = stop
        if route_type is not None:
          self.route_type = route_type
        if route is not None:
          self.route = route
        if facility is not None:
          self.facility = facility
        if direction_id is not None:
          self.direction_id = direction_id
        if activities is not None:
          self.activities = activities

    @property
    def trip(self):
        """
        Gets the trip of this InformedEntity.
        Unique id of a trip

        :return: The trip of this InformedEntity.
        :rtype: str
        """
        return self._trip

    @trip.setter
    def trip(self, trip):
        """
        Sets the trip of this InformedEntity.
        Unique id of a trip

        :param trip: The trip of this InformedEntity.
        :type: str
        """

        self._trip = trip

    @property
    def stop(self):
        """
        Gets the stop of this InformedEntity.
        Unique id of a stop

        :return: The stop of this InformedEntity.
        :rtype: str
        """
        return self._stop

    @stop.setter
    def stop(self, stop):
        """
        Sets the stop of this InformedEntity.
        Unique id of a stop

        :param stop: The stop of this InformedEntity.
        :type: str
        """

        self._stop = stop

    @property
    def route_type(self):
        """
        Gets the route_type of this InformedEntity.
        | Value | Name          | Example    | |-------|---------------|------------| | `0`   | Light Rail    | Green Line | | `1`   | Heavy Rail    | Red Line   | | `2`   | Commuter Rail |            | | `3`   | Bus           |            | | `4`   | Ferry         |            | 

        :return: The route_type of this InformedEntity.
        :rtype: int
        """
        return self._route_type

    @route_type.setter
    def route_type(self, route_type):
        """
        Sets the route_type of this InformedEntity.
        | Value | Name          | Example    | |-------|---------------|------------| | `0`   | Light Rail    | Green Line | | `1`   | Heavy Rail    | Red Line   | | `2`   | Commuter Rail |            | | `3`   | Bus           |            | | `4`   | Ferry         |            | 

        :param route_type: The route_type of this InformedEntity.
        :type: int
        """

        self._route_type = route_type

    @property
    def route(self):
        """
        Gets the route of this InformedEntity.
        Unique id of a route

        :return: The route of this InformedEntity.
        :rtype: str
        """
        return self._route

    @route.setter
    def route(self, route):
        """
        Sets the route of this InformedEntity.
        Unique id of a route

        :param route: The route of this InformedEntity.
        :type: str
        """

        self._route = route

    @property
    def facility(self):
        """
        Gets the facility of this InformedEntity.
        Unique id of a facility

        :return: The facility of this InformedEntity.
        :rtype: str
        """
        return self._facility

    @facility.setter
    def facility(self, facility):
        """
        Sets the facility of this InformedEntity.
        Unique id of a facility

        :param facility: The facility of this InformedEntity.
        :type: str
        """

        self._facility = facility

    @property
    def direction_id(self):
        """
        Gets the direction_id of this InformedEntity.
        Direction in which trip is traveling: `0` or `1`.  The meaning of `direction_id` varies based on the route. You can programmatically get the direction names from `/routes` `/data/{index}/attributes/direction_names` or `/routes/{id}` `/data/attributes/direction_names`.  

        :return: The direction_id of this InformedEntity.
        :rtype: int
        """
        return self._direction_id

    @direction_id.setter
    def direction_id(self, direction_id):
        """
        Sets the direction_id of this InformedEntity.
        Direction in which trip is traveling: `0` or `1`.  The meaning of `direction_id` varies based on the route. You can programmatically get the direction names from `/routes` `/data/{index}/attributes/direction_names` or `/routes/{id}` `/data/attributes/direction_names`.  

        :param direction_id: The direction_id of this InformedEntity.
        :type: int
        """

        self._direction_id = direction_id

    @property
    def activities(self):
        """
        Gets the activities of this InformedEntity.
        Activities affected by this alert.  If an entity is a station platform, and the alert only impacts those boarding at that platform and no one else, and the activity `\"BOARD\"` represents customers boarding at the informed entity, then the entity includes `activities` `[\"BOARD\"]`. If the alert affected customers exiting at the platform too, then `activities` is `[\"BOARD\", \"EXIT\"]`.  It should be noted that the `activities` array includes activities that are specifically affected. Thus if there were activities `\"BOARD\"`, `\"EXIT\"`, and `\"USING_WHEELCHAIR\"` [to board or exit], and a station were closed, then the `activities` array would include `\"BOARD\"` and `\"EXIT\"` but it would not be necessary to include the activity `\"USING_WHEELCHAIR\"`. Any rider entering the station who is `\"USING_WHEELCHAIR\"` is also a rider who `\"BOARD\"`s. Using a wheelchair to board is not specifically affected. 

        :return: The activities of this InformedEntity.
        :rtype: list[Activity]
        """
        return self._activities

    @activities.setter
    def activities(self, activities):
        """
        Sets the activities of this InformedEntity.
        Activities affected by this alert.  If an entity is a station platform, and the alert only impacts those boarding at that platform and no one else, and the activity `\"BOARD\"` represents customers boarding at the informed entity, then the entity includes `activities` `[\"BOARD\"]`. If the alert affected customers exiting at the platform too, then `activities` is `[\"BOARD\", \"EXIT\"]`.  It should be noted that the `activities` array includes activities that are specifically affected. Thus if there were activities `\"BOARD\"`, `\"EXIT\"`, and `\"USING_WHEELCHAIR\"` [to board or exit], and a station were closed, then the `activities` array would include `\"BOARD\"` and `\"EXIT\"` but it would not be necessary to include the activity `\"USING_WHEELCHAIR\"`. Any rider entering the station who is `\"USING_WHEELCHAIR\"` is also a rider who `\"BOARD\"`s. Using a wheelchair to board is not specifically affected. 

        :param activities: The activities of this InformedEntity.
        :type: list[Activity]
        """

        self._activities = activities

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InformedEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
