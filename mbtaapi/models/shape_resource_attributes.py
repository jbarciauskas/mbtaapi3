# coding: utf-8

"""
    MBTA

    MBTA service API. https://www.mbta.com

    OpenAPI spec version: 3.0
    Contact: developer@mbta.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ShapeResourceAttributes(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'priority': 'int',
        'polyline': 'str',
        'name': 'str',
        'direction_id': 'int'
    }

    attribute_map = {
        'priority': 'priority',
        'polyline': 'polyline',
        'name': 'name',
        'direction_id': 'direction_id'
    }

    def __init__(self, priority=None, polyline=None, name=None, direction_id=None):
        """
        ShapeResourceAttributes - a model defined in Swagger
        """

        self._priority = None
        self._polyline = None
        self._name = None
        self._direction_id = None

        if priority is not None:
          self.priority = priority
        if polyline is not None:
          self.polyline = polyline
        if name is not None:
          self.name = name
        if direction_id is not None:
          self.direction_id = direction_id

    @property
    def priority(self):
        """
        Gets the priority of this ShapeResourceAttributes.
        Representation of how important a shape is when choosing one for display. Higher number is higher priority.  Negative priority is not important enough to show as they only **MAY** be used. 

        :return: The priority of this ShapeResourceAttributes.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """
        Sets the priority of this ShapeResourceAttributes.
        Representation of how important a shape is when choosing one for display. Higher number is higher priority.  Negative priority is not important enough to show as they only **MAY** be used. 

        :param priority: The priority of this ShapeResourceAttributes.
        :type: int
        """

        self._priority = priority

    @property
    def polyline(self):
        """
        Gets the polyline of this ShapeResourceAttributes.
        ## Encoding/Decoding  [Encoded Polyline Algorithm Format](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)  ## Example Libraries  * [Javascript](https://www.npmjs.com/package/polyline) * [Erlang](https://blog.kempkens.io/posts/encoding-and-decoding-polylines-with-erlang/) * [Elixir](https://hex.pm/packages/polyline) 

        :return: The polyline of this ShapeResourceAttributes.
        :rtype: str
        """
        return self._polyline

    @polyline.setter
    def polyline(self, polyline):
        """
        Sets the polyline of this ShapeResourceAttributes.
        ## Encoding/Decoding  [Encoded Polyline Algorithm Format](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)  ## Example Libraries  * [Javascript](https://www.npmjs.com/package/polyline) * [Erlang](https://blog.kempkens.io/posts/encoding-and-decoding-polylines-with-erlang/) * [Elixir](https://hex.pm/packages/polyline) 

        :param polyline: The polyline of this ShapeResourceAttributes.
        :type: str
        """

        self._polyline = polyline

    @property
    def name(self):
        """
        Gets the name of this ShapeResourceAttributes.
        User-facing name for shape. It may, but is not required to, be a headsign

        :return: The name of this ShapeResourceAttributes.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ShapeResourceAttributes.
        User-facing name for shape. It may, but is not required to, be a headsign

        :param name: The name of this ShapeResourceAttributes.
        :type: str
        """

        self._name = name

    @property
    def direction_id(self):
        """
        Gets the direction_id of this ShapeResourceAttributes.
        Direction in which trip is traveling: `0` or `1`.  The meaning of `direction_id` varies based on the route. You can programmatically get the direction names from `/routes` `/data/{index}/attributes/direction_names` or `/routes/{id}` `/data/attributes/direction_names`.  

        :return: The direction_id of this ShapeResourceAttributes.
        :rtype: int
        """
        return self._direction_id

    @direction_id.setter
    def direction_id(self, direction_id):
        """
        Sets the direction_id of this ShapeResourceAttributes.
        Direction in which trip is traveling: `0` or `1`.  The meaning of `direction_id` varies based on the route. You can programmatically get the direction names from `/routes` `/data/{index}/attributes/direction_names` or `/routes/{id}` `/data/attributes/direction_names`.  

        :param direction_id: The direction_id of this ShapeResourceAttributes.
        :type: int
        """

        self._direction_id = direction_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ShapeResourceAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
